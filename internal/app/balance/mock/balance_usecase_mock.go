// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"avito-tech-task/internal/app/balance"
	"avito-tech-task/internal/app/models"
	"sync"
)

// Ensure, that MockService does implement balance.Service.
// If this is not the case, regenerate this file with moq.
var _ balance.Service = &MockService{}

// MockService is a mock implementation of balance.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked balance.Service
// 		mockedService := &MockService{
// 			GetBalanceFunc: func(n int64, s string) (*models.UserData, error) {
// 				panic("mock out the GetBalance method")
// 			},
// 			MakeTransferFunc: func(transferRequest *models.TransferRequest) (*models.TransferUsersData, error) {
// 				panic("mock out the MakeTransfer method")
// 			},
// 			UpdateBalanceFunc: func(requestUpdateBalance *models.RequestUpdateBalance) (*models.UserData, error) {
// 				panic("mock out the UpdateBalance method")
// 			},
// 		}
//
// 		// use mockedService in code that requires balance.Service
// 		// and then make assertions.
//
// 	}
type MockService struct {
	// GetBalanceFunc mocks the GetBalance method.
	GetBalanceFunc func(n int64, s string) (*models.UserData, error)

	// MakeTransferFunc mocks the MakeTransfer method.
	MakeTransferFunc func(transferRequest *models.TransferRequest) (*models.TransferUsersData, error)

	// UpdateBalanceFunc mocks the UpdateBalance method.
	UpdateBalanceFunc func(requestUpdateBalance *models.RequestUpdateBalance) (*models.UserData, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBalance holds details about calls to the GetBalance method.
		GetBalance []struct {
			// N is the n argument value.
			N int64
			// S is the s argument value.
			S string
		}
		// MakeTransfer holds details about calls to the MakeTransfer method.
		MakeTransfer []struct {
			// TransferRequest is the transferRequest argument value.
			TransferRequest *models.TransferRequest
		}
		// UpdateBalance holds details about calls to the UpdateBalance method.
		UpdateBalance []struct {
			// RequestUpdateBalance is the requestUpdateBalance argument value.
			RequestUpdateBalance *models.RequestUpdateBalance
		}
	}
	lockGetBalance    sync.RWMutex
	lockMakeTransfer  sync.RWMutex
	lockUpdateBalance sync.RWMutex
}

// GetBalance calls GetBalanceFunc.
func (mock *MockService) GetBalance(n int64, s string) (*models.UserData, error) {
	if mock.GetBalanceFunc == nil {
		panic("MockService.GetBalanceFunc: method is nil but Service.GetBalance was just called")
	}
	callInfo := struct {
		N int64
		S string
	}{
		N: n,
		S: s,
	}
	mock.lockGetBalance.Lock()
	mock.calls.GetBalance = append(mock.calls.GetBalance, callInfo)
	mock.lockGetBalance.Unlock()
	return mock.GetBalanceFunc(n, s)
}

// GetBalanceCalls gets all the calls that were made to GetBalance.
// Check the length with:
//     len(mockedService.GetBalanceCalls())
func (mock *MockService) GetBalanceCalls() []struct {
	N int64
	S string
} {
	var calls []struct {
		N int64
		S string
	}
	mock.lockGetBalance.RLock()
	calls = mock.calls.GetBalance
	mock.lockGetBalance.RUnlock()
	return calls
}

// MakeTransfer calls MakeTransferFunc.
func (mock *MockService) MakeTransfer(transferRequest *models.TransferRequest) (*models.TransferUsersData, error) {
	if mock.MakeTransferFunc == nil {
		panic("MockService.MakeTransferFunc: method is nil but Service.MakeTransfer was just called")
	}
	callInfo := struct {
		TransferRequest *models.TransferRequest
	}{
		TransferRequest: transferRequest,
	}
	mock.lockMakeTransfer.Lock()
	mock.calls.MakeTransfer = append(mock.calls.MakeTransfer, callInfo)
	mock.lockMakeTransfer.Unlock()
	return mock.MakeTransferFunc(transferRequest)
}

// MakeTransferCalls gets all the calls that were made to MakeTransfer.
// Check the length with:
//     len(mockedService.MakeTransferCalls())
func (mock *MockService) MakeTransferCalls() []struct {
	TransferRequest *models.TransferRequest
} {
	var calls []struct {
		TransferRequest *models.TransferRequest
	}
	mock.lockMakeTransfer.RLock()
	calls = mock.calls.MakeTransfer
	mock.lockMakeTransfer.RUnlock()
	return calls
}

// UpdateBalance calls UpdateBalanceFunc.
func (mock *MockService) UpdateBalance(requestUpdateBalance *models.RequestUpdateBalance) (*models.UserData, error) {
	if mock.UpdateBalanceFunc == nil {
		panic("MockService.UpdateBalanceFunc: method is nil but Service.UpdateBalance was just called")
	}
	callInfo := struct {
		RequestUpdateBalance *models.RequestUpdateBalance
	}{
		RequestUpdateBalance: requestUpdateBalance,
	}
	mock.lockUpdateBalance.Lock()
	mock.calls.UpdateBalance = append(mock.calls.UpdateBalance, callInfo)
	mock.lockUpdateBalance.Unlock()
	return mock.UpdateBalanceFunc(requestUpdateBalance)
}

// UpdateBalanceCalls gets all the calls that were made to UpdateBalance.
// Check the length with:
//     len(mockedService.UpdateBalanceCalls())
func (mock *MockService) UpdateBalanceCalls() []struct {
	RequestUpdateBalance *models.RequestUpdateBalance
} {
	var calls []struct {
		RequestUpdateBalance *models.RequestUpdateBalance
	}
	mock.lockUpdateBalance.RLock()
	calls = mock.calls.UpdateBalance
	mock.lockUpdateBalance.RUnlock()
	return calls
}
