// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"avito-tech-task/internal/app/balance"
	"avito-tech-task/internal/app/models"
	"sync"
)

// Ensure, that MockStorage does implement balance.Storage.
// If this is not the case, regenerate this file with moq.
var _ balance.Storage = &MockStorage{}

// MockStorage is a mock implementation of balance.Storage.
//
// 	func TestSomethingThatUsesStorage(t *testing.T) {
//
// 		// make and configure a mocked balance.Storage
// 		mockedStorage := &MockStorage{
// 			CreateAccountFunc: func(n int64) error {
// 				panic("mock out the CreateAccount method")
// 			},
// 			GetTransferUsersDataFunc: func(n1 int64, n2 int64) (*models.TransferUsersData, error) {
// 				panic("mock out the GetTransferUsersData method")
// 			},
// 			GetUserDataFunc: func(n int64) (*models.UserData, error) {
// 				panic("mock out the GetUserData method")
// 			},
// 			MakeTransferFunc: func(n1 int64, n2 int64, f float64) error {
// 				panic("mock out the MakeTransfer method")
// 			},
// 			UpdateBalanceFunc: func(n int64, f float64) (float64, error) {
// 				panic("mock out the UpdateBalance method")
// 			},
// 		}
//
// 		// use mockedStorage in code that requires balance.Storage
// 		// and then make assertions.
//
// 	}
type MockStorage struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(n int64) error

	// GetTransferUsersDataFunc mocks the GetTransferUsersData method.
	GetTransferUsersDataFunc func(n1 int64, n2 int64) (*models.TransferUsersData, error)

	// GetUserDataFunc mocks the GetUserData method.
	GetUserDataFunc func(n int64) (*models.UserData, error)

	// MakeTransferFunc mocks the MakeTransfer method.
	MakeTransferFunc func(n1 int64, n2 int64, f float64) error

	// UpdateBalanceFunc mocks the UpdateBalance method.
	UpdateBalanceFunc func(n int64, f float64) (float64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// N is the n argument value.
			N int64
		}
		// GetTransferUsersData holds details about calls to the GetTransferUsersData method.
		GetTransferUsersData []struct {
			// N1 is the n1 argument value.
			N1 int64
			// N2 is the n2 argument value.
			N2 int64
		}
		// GetUserData holds details about calls to the GetUserData method.
		GetUserData []struct {
			// N is the n argument value.
			N int64
		}
		// MakeTransfer holds details about calls to the MakeTransfer method.
		MakeTransfer []struct {
			// N1 is the n1 argument value.
			N1 int64
			// N2 is the n2 argument value.
			N2 int64
			// F is the f argument value.
			F float64
		}
		// UpdateBalance holds details about calls to the UpdateBalance method.
		UpdateBalance []struct {
			// N is the n argument value.
			N int64
			// F is the f argument value.
			F float64
		}
	}
	lockCreateAccount        sync.RWMutex
	lockGetTransferUsersData sync.RWMutex
	lockGetUserData          sync.RWMutex
	lockMakeTransfer         sync.RWMutex
	lockUpdateBalance        sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *MockStorage) CreateAccount(n int64) error {
	if mock.CreateAccountFunc == nil {
		panic("MockStorage.CreateAccountFunc: method is nil but Storage.CreateAccount was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(n)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedStorage.CreateAccountCalls())
func (mock *MockStorage) CreateAccountCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// GetTransferUsersData calls GetTransferUsersDataFunc.
func (mock *MockStorage) GetTransferUsersData(n1 int64, n2 int64) (*models.TransferUsersData, error) {
	if mock.GetTransferUsersDataFunc == nil {
		panic("MockStorage.GetTransferUsersDataFunc: method is nil but Storage.GetTransferUsersData was just called")
	}
	callInfo := struct {
		N1 int64
		N2 int64
	}{
		N1: n1,
		N2: n2,
	}
	mock.lockGetTransferUsersData.Lock()
	mock.calls.GetTransferUsersData = append(mock.calls.GetTransferUsersData, callInfo)
	mock.lockGetTransferUsersData.Unlock()
	return mock.GetTransferUsersDataFunc(n1, n2)
}

// GetTransferUsersDataCalls gets all the calls that were made to GetTransferUsersData.
// Check the length with:
//     len(mockedStorage.GetTransferUsersDataCalls())
func (mock *MockStorage) GetTransferUsersDataCalls() []struct {
	N1 int64
	N2 int64
} {
	var calls []struct {
		N1 int64
		N2 int64
	}
	mock.lockGetTransferUsersData.RLock()
	calls = mock.calls.GetTransferUsersData
	mock.lockGetTransferUsersData.RUnlock()
	return calls
}

// GetUserData calls GetUserDataFunc.
func (mock *MockStorage) GetUserData(n int64) (*models.UserData, error) {
	if mock.GetUserDataFunc == nil {
		panic("MockStorage.GetUserDataFunc: method is nil but Storage.GetUserData was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetUserData.Lock()
	mock.calls.GetUserData = append(mock.calls.GetUserData, callInfo)
	mock.lockGetUserData.Unlock()
	return mock.GetUserDataFunc(n)
}

// GetUserDataCalls gets all the calls that were made to GetUserData.
// Check the length with:
//     len(mockedStorage.GetUserDataCalls())
func (mock *MockStorage) GetUserDataCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetUserData.RLock()
	calls = mock.calls.GetUserData
	mock.lockGetUserData.RUnlock()
	return calls
}

// MakeTransfer calls MakeTransferFunc.
func (mock *MockStorage) MakeTransfer(n1 int64, n2 int64, f float64) error {
	if mock.MakeTransferFunc == nil {
		panic("MockStorage.MakeTransferFunc: method is nil but Storage.MakeTransfer was just called")
	}
	callInfo := struct {
		N1 int64
		N2 int64
		F  float64
	}{
		N1: n1,
		N2: n2,
		F:  f,
	}
	mock.lockMakeTransfer.Lock()
	mock.calls.MakeTransfer = append(mock.calls.MakeTransfer, callInfo)
	mock.lockMakeTransfer.Unlock()
	return mock.MakeTransferFunc(n1, n2, f)
}

// MakeTransferCalls gets all the calls that were made to MakeTransfer.
// Check the length with:
//     len(mockedStorage.MakeTransferCalls())
func (mock *MockStorage) MakeTransferCalls() []struct {
	N1 int64
	N2 int64
	F  float64
} {
	var calls []struct {
		N1 int64
		N2 int64
		F  float64
	}
	mock.lockMakeTransfer.RLock()
	calls = mock.calls.MakeTransfer
	mock.lockMakeTransfer.RUnlock()
	return calls
}

// UpdateBalance calls UpdateBalanceFunc.
func (mock *MockStorage) UpdateBalance(n int64, f float64) (float64, error) {
	if mock.UpdateBalanceFunc == nil {
		panic("MockStorage.UpdateBalanceFunc: method is nil but Storage.UpdateBalance was just called")
	}
	callInfo := struct {
		N int64
		F float64
	}{
		N: n,
		F: f,
	}
	mock.lockUpdateBalance.Lock()
	mock.calls.UpdateBalance = append(mock.calls.UpdateBalance, callInfo)
	mock.lockUpdateBalance.Unlock()
	return mock.UpdateBalanceFunc(n, f)
}

// UpdateBalanceCalls gets all the calls that were made to UpdateBalance.
// Check the length with:
//     len(mockedStorage.UpdateBalanceCalls())
func (mock *MockStorage) UpdateBalanceCalls() []struct {
	N int64
	F float64
} {
	var calls []struct {
		N int64
		F float64
	}
	mock.lockUpdateBalance.RLock()
	calls = mock.calls.UpdateBalance
	mock.lockUpdateBalance.RUnlock()
	return calls
}
