// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"avito-tech-task/internal/pkg/currency"
	"sync"
)

// Ensure, that MockConverterIface does implement currency.ConverterIface.
// If this is not the case, regenerate this file with moq.
var _ currency.ConverterIface = &MockConverterIface{}

// MockConverterIface is a mock implementation of currency.ConverterIface.
//
// 	func TestSomethingThatUsesConverterIface(t *testing.T) {
//
// 		// make and configure a mocked currency.ConverterIface
// 		mockedConverterIface := &MockConverterIface{
// 			GetFunc: func(s string) (float64, error) {
// 				panic("mock out the Get method")
// 			},
// 			UpdateFunc: func()  {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedConverterIface in code that requires currency.ConverterIface
// 		// and then make assertions.
//
// 	}
type MockConverterIface struct {
	// GetFunc mocks the Get method.
	GetFunc func(s string) (float64, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
		}
	}
	lockGet    sync.RWMutex
	lockUpdate sync.RWMutex
}

// Get calls GetFunc.
func (mock *MockConverterIface) Get(s string) (float64, error) {
	if mock.GetFunc == nil {
		panic("MockConverterIface.GetFunc: method is nil but ConverterIface.Get was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedConverterIface.GetCalls())
func (mock *MockConverterIface) GetCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *MockConverterIface) Update() {
	if mock.UpdateFunc == nil {
		panic("MockConverterIface.UpdateFunc: method is nil but ConverterIface.Update was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	mock.UpdateFunc()
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedConverterIface.UpdateCalls())
func (mock *MockConverterIface) UpdateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
